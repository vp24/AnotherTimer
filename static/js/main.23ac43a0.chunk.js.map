{"version":3,"sources":["components/sounds/ting.wav","components/clock/Clock.jsx","components/resetButton/resetButton.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","timer","className","ResetButton","onReset","onClick","App","props","secondDown","setState","state","startPause","isActive","timerID","setInterval","clearInterval","reset","audio","Audio","ting","playAudio","play","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,0MCY5BC,G,YATD,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACZ,OACI,6BACE,wBAAIC,UAAY,SAASD,M,gBCEpBE,EANK,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACI,4BAAQC,QAAWD,GAAnB,UCkEOE,E,kDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,WAAa,WACX,EAAKC,UAAS,SAACC,EAAOH,GAAR,MAAmB,CAC/BN,MAAOS,EAAMT,MAAQ,OAVN,EAcnBU,WAAa,YACiB,IAAxB,EAAKD,MAAME,UACb,EAAKH,SAAS,CAACG,UAAU,IACzB,EAAKC,QAAUC,aACb,kBAAM,EAAKN,eACX,OAEE,EAAKC,SAAS,CAACG,UAAU,IACzBG,cAAc,EAAKF,WAtBR,EA0BnBG,MAAQ,WACN,EAAKP,SAAS,CACZR,MAAO,GACPW,UAAU,GACTG,cAAc,EAAKF,WA9BL,EAiCnBI,MAAQ,IAAIC,MAAMC,KAjCC,EAkCnBC,UAAY,WACV,EAAKH,MAAMI,QAjCX,EAAKX,MAAQ,CACXE,UAAU,EACVX,MAAO,IAJQ,E,iEAuCdqB,KAAKZ,MAAMT,OAAS,GACrBqB,KAAKb,SAAS,CACZR,MAAO,IACNqB,KAAKF,a,+BAOV,OACE,6BACA,kBAAC,EAAD,CAAOnB,MAASqB,KAAKZ,MAAMT,QAC3B,yBAAKC,UAAY,MACjB,4BAAQG,QAAWiB,KAAKX,YAAxB,SACA,kBAAC,EAAD,CAAaP,QAAWkB,KAAKN,c,GAvDjBO,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23ac43a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ting.2ed3ed02.wav\";","import React from 'react';\r\nimport './Clock.css';\r\n\r\nconst Clock = ({timer}) =>{\r\n    return(\r\n        <div>\r\n          <h1 className = 'clock'>{timer}</h1>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\n\r\nconst ResetButton = ({onReset}) => {\r\n    return(\r\n        <button onClick = {onReset} >Reset</button>\r\n    );\r\n}\r\n\r\nexport default ResetButton;","import React from 'react';\nimport './App.css';\nimport Clock from './components/clock/Clock';\nimport ting from './components/sounds/ting.wav';\nimport ResetButton from './components/resetButton/resetButton';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActive: false,\n      timer: 90\n    }\n  }\n\n  secondDown = () => {\n    this.setState((state, props) => ({\n      timer: state.timer - 1\n    }));\n  }\n\n  startPause = () => {\n    if (this.state.isActive === false) {\n      this.setState({isActive: true})\n      this.timerID = setInterval(\n        () => this.secondDown(),\n        1000);}\n        else {\n          this.setState({isActive: false})\n          clearInterval(this.timerID);\n        }\n  }\n\n  reset = () => {\n    this.setState({\n      timer: 90,\n      isActive: false\n    }, clearInterval(this.timerID))\n  }\n\n  audio = new Audio(ting);\n  playAudio = () => {\n    this.audio.play()\n  }\n\n  componentDidUpdate(){\n    if(this.state.timer <= 0){\n      this.setState({\n        timer: 90\n      }, this.playAudio)\n    }\n\n  }\n\n\n  render(){\n    return(\n      <div>\n      <Clock timer = {this.state.timer}/>\n      <div className = 'tc'>\n      <button onClick = {this.startPause}>Start</button>\n      <ResetButton onReset = {this.reset}/>\n      </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}